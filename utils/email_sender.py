import os
import json
import smtplib
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart
from datetime import datetime
from typing import List
import logging

from models.event import Event

logger = logging.getLogger(__name__)


def format_events_html(events: List[Event]) -> str:
    """Format events into an HTML email body"""
    
    # Group events by venue
    events_by_venue = {}
    for event in sorted(events, key=lambda e: e.date):
        if event.venue not in events_by_venue:
            events_by_venue[event.venue] = []
        events_by_venue[event.venue].append(event)
    
    html = """
    <html>
    <head>
        <style>
            body { font-family: Arial, sans-serif; background-color: #1a1a1a; color: #ffffff; }
            .container { max-width: 600px; margin: 0 auto; padding: 20px; }
            h1 { color: #ff6b6b; margin-bottom: 30px; }
            h2 { color: #4ecdc4; margin-top: 30px; margin-bottom: 20px; }
            .event { background-color: #2d2d2d; padding: 20px; margin-bottom: 15px; border-radius: 8px; }
            .event-name { font-size: 18px; font-weight: bold; color: #ffffff; margin-bottom: 10px; }
            .event-date { color: #ff6b6b; margin-bottom: 5px; }
            .event-artists { color: #4ecdc4; margin-bottom: 5px; }
            .event-link { color: #66d9ef; text-decoration: none; }
            .event-link:hover { text-decoration: underline; }
            .footer { margin-top: 40px; padding-top: 20px; border-top: 1px solid #444; color: #888; font-size: 14px; }
        </style>
    </head>
    <body>
        <div class="container">
            <h1>ðŸŽµ Amsterdam Techno Events This Week</h1>
    """
    
    for venue, venue_events in events_by_venue.items():
        html += f'<h2>{venue}</h2>'
        
        for event in venue_events:
            html += '<div class="event">'
            html += f'<div class="event-name">{event.name}</div>'
            html += f'<div class="event-date">ðŸ“… {event.date.strftime("%A, %B %d at %H:%M")}</div>'
            
            if event.artists:
                artists_str = ", ".join(event.artists[:5])
                if len(event.artists) > 5:
                    artists_str += f" +{len(event.artists) - 5} more"
                html += f'<div class="event-artists">ðŸŽ§ {artists_str}</div>'
            
            if event.url:
                html += f'<div><a href="{event.url}" class="event-link">View Event Details â†’</a></div>'
            
            html += '</div>'
    
    html += """
            <div class="footer">
                <p>Stay underground, stay informed! ðŸ–¤</p>
                <p>This email was generated by the Amsterdam Techno Agent</p>
            </div>
        </div>
    </body>
    </html>
    """
    
    return html


def format_events_text(events: List[Event]) -> str:
    """Format events into plain text"""
    
    # Group events by venue
    events_by_venue = {}
    for event in sorted(events, key=lambda e: e.date):
        if event.venue not in events_by_venue:
            events_by_venue[event.venue] = []
        events_by_venue[event.venue].append(event)
    
    text = "AMSTERDAM TECHNO EVENTS THIS WEEK\n"
    text += "=" * 40 + "\n\n"
    
    for venue, venue_events in events_by_venue.items():
        text += f"\n{venue.upper()}\n"
        text += "-" * len(venue) + "\n\n"
        
        for event in venue_events:
            text += f"ðŸ“… {event.date.strftime('%A, %B %d at %H:%M')}\n"
            text += f"   {event.name}\n"
            
            if event.artists:
                artists_str = ", ".join(event.artists[:5])
                if len(event.artists) > 5:
                    artists_str += f" +{len(event.artists) - 5} more"
                text += f"   Artists: {artists_str}\n"
            
            if event.url:
                text += f"   Link: {event.url}\n"
            
            text += "\n"
    
    text += "\n" + "-" * 40 + "\n"
    text += "Stay underground, stay informed!\n"
    text += "Generated by the Amsterdam Techno Agent\n"
    
    return text


def send_email(events: List[Event], recipient: str, smtp_config: dict = None):
    """Send email with events listing"""
    
    if not smtp_config:
        # Try to get from environment variables
        smtp_config = {
            'server': os.getenv('SMTP_SERVER', 'smtp.gmail.com'),
            'port': int(os.getenv('SMTP_PORT', '587')),
            'username': os.getenv('SMTP_USERNAME'),
            'password': os.getenv('SMTP_PASSWORD'),
            'from_email': os.getenv('SMTP_FROM_EMAIL'),
        }
    
    if not all([smtp_config.get('username'), smtp_config.get('password')]):
        logger.error("SMTP credentials not configured")
        return False
    
    try:
        # Create message
        msg = MIMEMultipart('alternative')
        msg['Subject'] = f"Amsterdam Techno Events - {datetime.now().strftime('%B %d, %Y')}"
        msg['From'] = smtp_config.get('from_email', smtp_config['username'])
        msg['To'] = recipient
        
        # Create text and HTML parts
        text_part = MIMEText(format_events_text(events), 'plain')
        html_part = MIMEText(format_events_html(events), 'html')
        
        msg.attach(text_part)
        msg.attach(html_part)
        
        # Send email
        with smtplib.SMTP(smtp_config['server'], smtp_config['port']) as server:
            server.starttls()
            server.login(smtp_config['username'], smtp_config['password'])
            server.send_message(msg)
            
        logger.info(f"Email sent successfully to {recipient}")
        return True
        
    except Exception as e:
        logger.error(f"Failed to send email: {e}")
        return False


def save_events_json(events: List[Event], filename: str = "events.json"):
    """Save events to a JSON file for debugging"""
    
    events_data = [event.dict() for event in events]
    
    with open(filename, 'w', encoding='utf-8') as f:
        json.dump(events_data, f, indent=2, ensure_ascii=False, default=str)
        
    logger.info(f"Saved {len(events)} events to {filename}")